@page
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model LipstickTaggerWebApplication.Pages.WorkDetailModel
@{
    ViewData["Title"] = "内容详情";
}
@section Head
{
    <script src="/js/cropper.min.js"></script>
    <link href="/css/cropper.min.css" rel="stylesheet">
    @if (!string.IsNullOrEmpty(Model.NextPath))
    {
        <link rel="prefetch" href="@WorkDetailModel.GetImgUrl(Model.NextPath)" as="image" type="image/jpeg" />
    }
    @if (!string.IsNullOrEmpty(Model.PrevPath))
    {
        <link rel="prefetch" href="@WorkDetailModel.GetImgUrl(Model.PrevPath)" as="image" type="image/jpeg" />
    }
}
<div style="max-height:90vh">
    <img id="image" style="display:block;width:100%" src="@Model.ImgPath" />
</div>
<select id="cropselect"></select>
<br />
<button id="leftrotate">左旋</button>
<input id="input-num" type="number" value="0" />
<button id="rightrotate">右旋</button>
<br />
<button id="removebtn">Remove</button>
<br />
<select id="selectname">
    <option value="0">口红本体</option>
    <option value="1">口红膏体及本体</option>
    <option value="2">口红涂抹样例</option>
    <option value="3">口红外包装</option>
</select>
<button id="addbtn">Add</button>
<br />
<hr />
@if (Model.InfoStr != null)
{
    @(Model.InfoStr.RateSku)
    <br />
    @(Model.InfoStr.Rater)<span>&nbsp;|&nbsp;</span>
    @(Model.InfoStr.RateDate)
    <br />
    @(Model.InfoStr.RateContent)
    <br />
    @(Model.InfoStr.AppendDate)
    <br />
    @(Model.InfoStr.AppendContent)
    <br />
}

<hr />
@*<select style="height:200pt;width:fit-content"
    asp-for="SelectedTags" asp-items="WorkDetailModel.GetTagList().Select(a=>new SelectListItem() { Text=a,Value=a})"></select>*@
<form id="dataform" method="post">
    <table class="table">
        <tr>
            <th>Id</th>
            <th>Enable</th>
        </tr>
        @for (int i = 0; i < Model.Tags.Count; i++)
        {
            <tr>
                <td>
                    @*<input type="hidden" name="Tags.Index" value="@i" />*@
                    <input type="hidden" asp-for="Tags[i].Tag" value="@Model.Tags[i].Tag" />
                    @Model.Tags[i].Tag
                </td>
                <td><input asp-for="Tags[i].Enable" type="checkbox" value="true" /></td>
                @*checked="" @(Model.Tags[i].Enable ? "checked='checked'" : "")*@
            </tr>
        }
    </table>
    <input type="hidden" name="ForceNoSave" value="true" id="forcenosave"/>
    @Html.HiddenFor(m => m.TagCropResults, new { id = "cropsinput" })
    @Html.HiddenFor(m => m.path)
    @Html.HiddenFor(m => m.NextPath, new { id = "hid_nextpath" })
    @Html.HiddenFor(m => m.PrevPath, new { id = "hid_prevpath" })
    <p>@Html.CheckBoxFor(m => m.AutoSave) AUTO SAVE</p>
    <button id="savebtn" disabled asp-page-handler="Save">Save</button>
    <button id="nextbtn" asp-page-handler="Next">Next</button>
    <button id="prevbtn" asp-page-handler="Prev">Prev</button>
</form>
<script>
    const removeChilds = (parent) => {
        while (parent.lastChild) {
            parent.removeChild(parent.lastChild);
        }
    };


    const image = document.getElementById('image');

    function loadcropper() {
        const cropper = new Cropper(image, {
            //aspectRatio: 16 / 9,
            autoCrop: false,
            zoomable: false,
            viewMode: 1,
            crop(event) {
                //console.log(event.detail.x);
                //console.log(event.detail.y);
                //console.log(event.detail.width);
                //console.log(event.detail.height);
                //console.log(event.detail.rotate);
                //console.log(event.detail.scaleX);
                //console.log(event.detail.scaleY);
            },
        });

        var leftrotate = document.getElementById("leftrotate");
        var rightrotate = document.getElementById("rightrotate");
        var input_num = document.getElementById("input-num");  //数字显示
        function setrotate() {
            cropper.rotateTo(parseInt(input_num.value));
        }
        input_num.onchange = function () {
            setrotate();
        }
        yinyue200_isint = false;
        leftrotate.onmousedown = function () {
            var i = 0; //变量i
            if (yinyue200_isint) {
                clearInterval(mouseTime);   //清除setInterval的时间
                yinyue200_isint = false;
            }
            mouseTime = setInterval(function () {  //setInterval可一直执行内部函数
                left();
                i++  //若过一秒，执行一次i++
            }, 70);
            yinyue200_isint = true;
            if (i == 0) {  //i=0时证明无长按事件为单击事件
                left();
            }
        }
        function left() { //数字加1函数
            if (input_num.value < 0) {
                input_num.value = 359;
            } else {
                input_num.value = parseInt(input_num.value) - 1;
            }
            setrotate();
        }
        leftrotate.onmouseup = function () {//鼠标抬起，执行清除
            if (yinyue200_isint) {
                clearInterval(mouseTime);   //清除setInterval的时间
                yinyue200_isint = false;
            }
        }
        rightrotate.onmousedown = function () {
            var i = 0;
            if (yinyue200_isint) {
                clearInterval(mouseTime);   //清除setInterval的时间
                yinyue200_isint = false;
            }
            mouseTime = setInterval(function () {
                right();
                i++     //i=0时证明无长按事件为单击事件
            }, 70); //1000即1秒
            yinyue200_isint = true;
            if (i == 0) {
                right();
            }
        }
        function right() {
            if (input_num.value >= 360) {
                input_num.value = 0;
            } else {
                input_num.value = parseInt(input_num.value) + 1;
            }
            setrotate();
        }
        rightrotate.onmouseup = function () {
            if (yinyue200_isint) {
                clearInterval(mouseTime);   //清除setInterval的时间
                yinyue200_isint = false;
            }
        }

        var cropsinput = document.getElementById("cropsinput");
        const crops = cropsinput.value === "" ? [] : JSON.parse(cropsinput.value);
        var addbtn = document.getElementById("addbtn");
        var selectname = document.getElementById("selectname");
        function createOption(value, content) {
            let li = document.createElement('option');
            li.textContent = content;
            li.value = value;
            return li;
        }
        function resetselectnorebuild() {
            var cropselect = document.getElementById("cropselect");
            if (cropselect.value != "") {
                cropper.setData(crops[cropselect.value].CropResult);
            }
        }
        function resetselect() {
            var cropselect = document.getElementById("cropselect");
            removeChilds(cropselect);
            cropselect.appendChild(createOption("", "请选择"));
            for (var i = 0; i < crops.length; i++) {
                cropselect.appendChild(createOption(i, crops[i].Tag));
            }
            resetselectnorebuild();
        }
        resetselect();
        addbtn.onclick = function () {
            var cpdata = cropper.getData(false);
            if (cpdata.height == 0 && cpdata.width == 0) {
                alert("请先选择区域");
                return;
            }
            crops.push({ Tag: selectname.children[selectname.value].textContent, CropResult: cpdata });
            resetselect();
            cropselect.value = crops.length - 1;
            resetselectnorebuild();
        }
        var removebtn = document.getElementById("removebtn");
        removebtn.onclick = function () {
            crops.splice(cropselect.value, 1);
            resetselect();
        }
        oldcropselectindex = -1;
        cropselect.onchange = function () {
            if (oldcropselectindex > 0) {
                crops[oldcropselectindex].CropResult = cropper.getData(false);
            }
            cropper.crop();
            if (cropselect.value == "") {
                cropper.clear();
            }
            else {
                cropper.setData(crops[cropselect.value].CropResult);
            }
            oldcropselectindex = cropselect.value;
        }
        $('#dataform').submit(function () {
            if (cropselect.value != "") {
                crops[cropselect.value].CropResult = cropper.getData(false);
            }
            else {
                var cpdata = cropper.getData(false);
                if (cpdata.height > 0 && cpdata.width > 0) {
                    if (confirm("你当前划定的区域将不会被保存，你确定要继续吗？")) {

                    }
                    else {
                        return false;
                    }
                }
            }
            cropsinput.value = JSON.stringify(crops);
            return true;
        });

        var savebtn = document.getElementById("savebtn");
        savebtn.disabled = false;

        var nextbtn = document.getElementById("nextbtn");
        var prevbtn = document.getElementById("prevbtn");
        var hid_nextpath = document.getElementById("hid_nextpath");
        var hid_prevpath = document.getElementById("hid_prevpath");
        if (hid_nextpath.value == "") {
            nextbtn.disabled = true;
        }
        if (hid_prevpath.value == "") {
            prevbtn.disabled = true;
        }

        var forcenosave = document.getElementById("forcenosave");
        forcenosave.value = false;
    }

    if (image.complete) {
        loadcropper();
    }
    else {
        $('#image').on("load", function () {
            loadcropper();
        });
    }

</script>

